@page "/reservations"

@using ISAProjekat23.Model.Domain

@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject IJSRuntime Js

<PageTitle>Reservations</PageTitle>

<div class="container mt-5">
    <h2>Reservations</h2>

    <ul class="list-group">
        <!-- Reservation 1 -->
        @foreach (var reservation in reservationsByUser)
        {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <div>
                <strong>Date:</strong> @reservation.Appointment?.Start
                <br>
                <strong>Duration:</strong> @reservation.Appointment?.Duration
                <br>
                <strong>Product:</strong> @reservation.Product?.Name
            </div>
                <button class="btn btn-danger" @onclick="async () => await CancelReservation(reservation.Id)">Cancel</button>
        </li>
        }
    </ul>

</div>


@code {
    private User? loggedInUser;
    private List<Reservation>? reservationsByUser;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await LocalStorage.GetItemAsync<User>("currentUser");
        reservationsByUser = await Http.GetFromJsonAsync<List<Reservation>>($"https://localhost:7241/Reservation/GetReservationsByUser?userId={loggedInUser.Id}");
    }

    private async Task CancelReservation(int reservationId)
    {
        await Http.GetFromJsonAsync<bool>($"https://localhost:7241/Reservation/CancelReservation?reservationId={reservationId}");
        await Js.InvokeVoidAsync("alert", "Reservation cancelled successfully! You will be penalized accordingly!");
        NavManager.NavigateTo("/reservations", true);

    }

    private bool IsLessThan24h(DateTime start)
    {
        return (start - DateTime.Now).TotalHours < 24;
    }
}

